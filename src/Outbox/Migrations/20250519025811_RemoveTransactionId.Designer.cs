// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Outbox;

#nullable disable

namespace Outbox.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250519025811_RemoveTransactionId")]
    partial class RemoveTransactionId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("outbox")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Outbox.Entities.OutboxMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Dictionary<string, string>>("Headers")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("headers");

                    b.Property<string>("Key")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("key");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasColumnName("partition");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("topic");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.HasIndex("Topic", "Partition", "Id")
                        .HasDatabaseName("ix_outbox_messages_topic_partition_id");

                    b.ToTable("outbox_messages", "outbox");
                });

            modelBuilder.Entity("Outbox.Entities.OutboxOffset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AvailableAfter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("available_after")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("LastProcessedId")
                        .HasColumnType("integer")
                        .HasColumnName("last_processed_id");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasColumnName("partition");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("topic");

                    b.HasKey("Id")
                        .HasName("pk_outbox_offsets");

                    b.HasIndex("Topic", "Partition")
                        .IsUnique()
                        .HasDatabaseName("ix_outbox_offsets_topic_partition");

                    b.ToTable("outbox_offsets", "outbox");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AvailableAfter = new DateTimeOffset(new DateTime(2025, 5, 18, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastProcessedId = 0,
                            Partition = 0,
                            Topic = "topic-1"
                        },
                        new
                        {
                            Id = 3,
                            AvailableAfter = new DateTimeOffset(new DateTime(2025, 5, 18, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastProcessedId = 0,
                            Partition = 1,
                            Topic = "topic-1"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
